
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000e7e  00000f12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800102  00800102  00000f14  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051a9  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001925  00000000  00000000  00006361  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c65  00000000  00000000  00007c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f0  00000000  00000000  0000a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021ca  00000000  00000000  0000afdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e7c  00000000  00000000  0000d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  00010022  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b7 c0       	rjmp	.+366    	; 0x170 <__ctors_end>
   2:	00 00       	nop
   4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
   6:	00 00       	nop
   8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
   a:	00 00       	nop
   c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
   e:	00 00       	nop
  10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
  12:	00 00       	nop
  14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
  16:	00 00       	nop
  18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
  22:	00 00       	nop
  24:	c0 c0       	rjmp	.+384    	; 0x1a6 <__bad_interrupt>
  26:	00 00       	nop
  28:	c4 c4       	rjmp	.+2440   	; 0x9b2 <__vector_10>
  2a:	00 00       	nop
  2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
  36:	00 00       	nop
  38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
  42:	00 00       	nop
  44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
  46:	00 00       	nop
  48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
  52:	00 00       	nop
  54:	a8 c0       	rjmp	.+336    	; 0x1a6 <__bad_interrupt>
  56:	00 00       	nop
  58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c1       	rjmp	.+566    	; 0x29c <__vector_25>
  66:	00 00       	nop
  68:	9e c0       	rjmp	.+316    	; 0x1a6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
  72:	00 00       	nop
  74:	98 c0       	rjmp	.+304    	; 0x1a6 <__bad_interrupt>
  76:	00 00       	nop
  78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
  82:	00 00       	nop
  84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
  86:	00 00       	nop
  88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	8a c0       	rjmp	.+276    	; 0x1a6 <__bad_interrupt>
  92:	00 00       	nop
  94:	88 c0       	rjmp	.+272    	; 0x1a6 <__bad_interrupt>
  96:	00 00       	nop
  98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	14 03 48 00 4f 00 52 00 49 00 50 00 41 00 44 00     ..H.O.R.I.P.A.D.
  bc:	20 00 53 00 00 00                                    .S...

000000c2 <ManufacturerString>:
  c2:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  d2:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000e0 <LanguageString>:
  e0:	04 03 09 04                                         ....

000000e4 <ConfigurationDescriptor>:
  e4:	09 02 29 00 01 01 00 80 7d 09 04 00 00 02 03 00     ..).....}.......
  f4:	00 00 09 21 11 01 00 01 22 50 00 07 05 02 03 40     ...!...."P.....@
 104:	00 05 07 05 81 03 40 00 05                          ......@..

0000010d <DeviceDescriptor>:
 10d:	12 01 00 02 00 00 00 40 0d 0f c1 00 72 05 01 02     .......@....r...
 11d:	00 01                                               ..

0000011f <JoystickReport>:
 11f:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 12f:	95 0e 05 09 19 01 29 0e 81 02 95 02 81 01 05 01     ......).........
 13f:	25 07 46 3b 01 75 04 95 01 65 14 09 39 81 42 65     %.F;.u...e..9.Be
 14f:	00 95 01 81 01 26 ff 00 46 ff 00 09 30 09 31 09     .....&..F...0.1.
 15f:	32 09 35 75 08 95 04 81 02 75 08 95 01 81 01 c0     2.5u.....u......
 16f:	00                                                  .

00000170 <__ctors_end>:
 170:	11 24       	eor	r1, r1
 172:	1f be       	out	0x3f, r1	; 63
 174:	cf ef       	ldi	r28, 0xFF	; 255
 176:	da e0       	ldi	r29, 0x0A	; 10
 178:	de bf       	out	0x3e, r29	; 62
 17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
 17c:	11 e0       	ldi	r17, 0x01	; 1
 17e:	a0 e0       	ldi	r26, 0x00	; 0
 180:	b1 e0       	ldi	r27, 0x01	; 1
 182:	ee e7       	ldi	r30, 0x7E	; 126
 184:	fe e0       	ldi	r31, 0x0E	; 14
 186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
 188:	05 90       	lpm	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	a2 30       	cpi	r26, 0x02	; 2
 18e:	b1 07       	cpc	r27, r17
 190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	a2 e0       	ldi	r26, 0x02	; 2
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
 19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
 19c:	a9 32       	cpi	r26, 0x29	; 41
 19e:	b2 07       	cpc	r27, r18
 1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
 1a2:	a7 d1       	rcall	.+846    	; 0x4f2 <main>
 1a4:	6a c6       	rjmp	.+3284   	; 0xe7a <_exit>

000001a6 <__bad_interrupt>:
 1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <USART_Init>:
}

inline uint8_t recv_byte(void) {
    while (!(UCSR1A & _BV(RXC1)));
    return UDR1;
}
 1a8:	9c 01       	movw	r18, r24
 1aa:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 1b4:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <__TEXT_REGION_LENGTH__+0x7e00cb>
 1b8:	b9 01       	movw	r22, r18
 1ba:	37 ff       	sbrs	r19, 7
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <USART_Init+0x1a>
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	75 95       	asr	r23
 1c4:	67 95       	ror	r22
 1c6:	cb 01       	movw	r24, r22
 1c8:	77 0f       	add	r23, r23
 1ca:	aa 0b       	sbc	r26, r26
 1cc:	bb 0b       	sbc	r27, r27
 1ce:	bc 01       	movw	r22, r24
 1d0:	cd 01       	movw	r24, r26
 1d2:	60 5c       	subi	r22, 0xC0	; 192
 1d4:	7d 4b       	sbci	r23, 0xBD	; 189
 1d6:	80 4f       	sbci	r24, 0xF0	; 240
 1d8:	9f 4f       	sbci	r25, 0xFF	; 255
 1da:	03 2e       	mov	r0, r19
 1dc:	00 0c       	add	r0, r0
 1de:	44 0b       	sbc	r20, r20
 1e0:	55 0b       	sbc	r21, r21
 1e2:	29 d6       	rcall	.+3154   	; 0xe36 <__udivmodsi4>
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	31 09       	sbc	r19, r1
 1e8:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1f0:	88 e1       	ldi	r24, 0x18	; 24
 1f2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 1f6:	53 9a       	sbi	0x0a, 3	; 10
 1f8:	5a 9a       	sbi	0x0b, 2	; 11
 1fa:	08 95       	ret

000001fc <disable_watchdog>:
 1fc:	84 b7       	in	r24, 0x34	; 52
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	84 bf       	out	0x34, r24	; 52
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	a8 95       	wdr
 208:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 20c:	88 61       	ori	r24, 0x18	; 24
 20e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 212:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 216:	0f be       	out	0x3f, r0	; 63
 218:	08 95       	ret

0000021a <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
 21a:	29 2f       	mov	r18, r25
 21c:	33 27       	eor	r19, r19
 21e:	23 30       	cpi	r18, 0x03	; 3
 220:	31 05       	cpc	r19, r1
 222:	e1 f0       	breq	.+56     	; 0x25c <CALLBACK_USB_GetDescriptor+0x42>
 224:	58 f4       	brcc	.+22     	; 0x23c <CALLBACK_USB_GetDescriptor+0x22>
 226:	21 30       	cpi	r18, 0x01	; 1
 228:	31 05       	cpc	r19, r1
 22a:	99 f0       	breq	.+38     	; 0x252 <CALLBACK_USB_GetDescriptor+0x38>
 22c:	22 30       	cpi	r18, 0x02	; 2
 22e:	31 05       	cpc	r19, r1
 230:	69 f5       	brne	.+90     	; 0x28c <CALLBACK_USB_GetDescriptor+0x72>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
 232:	89 e2       	ldi	r24, 0x29	; 41
 234:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
 236:	24 ee       	ldi	r18, 0xE4	; 228
 238:	30 e0       	ldi	r19, 0x00	; 0
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
 23a:	2c c0       	rjmp	.+88     	; 0x294 <CALLBACK_USB_GetDescriptor+0x7a>
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
 23c:	21 32       	cpi	r18, 0x21	; 33
 23e:	31 05       	cpc	r19, r1
 240:	01 f1       	breq	.+64     	; 0x282 <CALLBACK_USB_GetDescriptor+0x68>
 242:	22 32       	cpi	r18, 0x22	; 34
 244:	31 05       	cpc	r19, r1
 246:	11 f5       	brne	.+68     	; 0x28c <CALLBACK_USB_GetDescriptor+0x72>
            Address = &ConfigurationDescriptor.HID_JoystickHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
        case DTYPE_Report:
            Address = &JoystickReport;
            Size    = sizeof(JoystickReport);
 248:	80 e5       	ldi	r24, 0x50	; 80
 24a:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_JoystickHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
        case DTYPE_Report:
            Address = &JoystickReport;
 24c:	2f e1       	ldi	r18, 0x1F	; 31
 24e:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(JoystickReport);
            break;
 250:	21 c0       	rjmp	.+66     	; 0x294 <CALLBACK_USB_GetDescriptor+0x7a>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
 252:	82 e1       	ldi	r24, 0x12	; 18
 254:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
 256:	2d e0       	ldi	r18, 0x0D	; 13
 258:	31 e0       	ldi	r19, 0x01	; 1
 25a:	1c c0       	rjmp	.+56     	; 0x294 <CALLBACK_USB_GetDescriptor+0x7a>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
 25c:	99 27       	eor	r25, r25
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	91 05       	cpc	r25, r1
 262:	49 f0       	breq	.+18     	; 0x276 <CALLBACK_USB_GetDescriptor+0x5c>
 264:	28 f0       	brcs	.+10     	; 0x270 <CALLBACK_USB_GetDescriptor+0x56>
 266:	02 97       	sbiw	r24, 0x02	; 2
 268:	89 f4       	brne	.+34     	; 0x28c <CALLBACK_USB_GetDescriptor+0x72>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case STRING_ID_Product:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
 26a:	ec ea       	ldi	r30, 0xAC	; 172
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	05 c0       	rjmp	.+10     	; 0x27a <CALLBACK_USB_GetDescriptor+0x60>
        case DTYPE_String:
            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
 270:	e0 ee       	ldi	r30, 0xE0	; 224
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <CALLBACK_USB_GetDescriptor+0x60>
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 276:	e2 ec       	ldi	r30, 0xC2	; 194
 278:	f0 e0       	ldi	r31, 0x00	; 0
                    break;
                case STRING_ID_Product:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
 27a:	84 91       	lpm	r24, Z
 27c:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case STRING_ID_Product:
                    Address = &ProductString;
 27e:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
 280:	09 c0       	rjmp	.+18     	; 0x294 <CALLBACK_USB_GetDescriptor+0x7a>
            }

            break;
        case DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_JoystickHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	90 e0       	ldi	r25, 0x00	; 0
                    break;
            }

            break;
        case DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_JoystickHID;
 286:	26 ef       	ldi	r18, 0xF6	; 246
 288:	30 e0       	ldi	r19, 0x00	; 0
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
 28a:	04 c0       	rjmp	.+8      	; 0x294 <CALLBACK_USB_GetDescriptor+0x7a>
) {
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
    const void** const DescriptorAddress
) {
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
            Address = &JoystickReport;
            Size    = sizeof(JoystickReport);
            break;
    }

    *DescriptorAddress = Address;
 294:	fa 01       	movw	r30, r20
 296:	31 83       	std	Z+1, r19	; 0x01
 298:	20 83       	st	Z, r18
    return Size;
}
 29a:	08 95       	ret

0000029c <__vector_25>:
USB_Input_Packet_t usbInput;
USB_JoystickReport_Input_t buffer;
USB_JoystickReport_Input_t defaultBuf;
State_t state = OUT_OF_SYNC;

ISR(USART1_RX_vect) {
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
        send_byte(*str++);
    }
}

inline uint8_t recv_byte(void) {
    while (!(UCSR1A & _BV(RXC1)));
 2b2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2b6:	87 ff       	sbrs	r24, 7
 2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <__vector_25+0x16>
    return UDR1;
 2ba:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    uint8_t b = recv_byte();
    if (state == SYNC_START) {
 2be:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 2c2:	91 30       	cpi	r25, 0x01	; 1
 2c4:	79 f4       	brne	.+30     	; 0x2e4 <__vector_25+0x48>
        if (b == COMMAND_SYNC_1) {
 2c6:	83 33       	cpi	r24, 0x33	; 51
 2c8:	49 f4       	brne	.+18     	; 0x2dc <__vector_25+0x40>
            state = SYNC_1;
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
inline void enable_rx_isr(void) {
    UCSR1B |= _BV(RXCIE1);
}

inline void send_byte(uint8_t c) {
    while (!(UCSR1A & _BV(UDRE1)));
 2d0:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2d4:	95 ff       	sbrs	r25, 5
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <__vector_25+0x34>
    UDR1 = c;
 2d8:	9c ec       	ldi	r25, 0xCC	; 204
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <__vector_25+0x5e>
            send_byte(RESP_SYNC_1);
        }
        else state = OUT_OF_SYNC;
 2dc:	93 e0       	ldi	r25, 0x03	; 3
 2de:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 2e2:	65 c0       	rjmp	.+202    	; 0x3ae <__vector_25+0x112>
    } else if (state == SYNC_1) {
 2e4:	92 30       	cpi	r25, 0x02	; 2
 2e6:	61 f4       	brne	.+24     	; 0x300 <__vector_25+0x64>
        if (b == COMMAND_SYNC_2) {
 2e8:	8c 3c       	cpi	r24, 0xCC	; 204
 2ea:	c1 f7       	brne	.-16     	; 0x2dc <__vector_25+0x40>
            state = SYNCED;
 2ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
inline void enable_rx_isr(void) {
    UCSR1B |= _BV(RXCIE1);
}

inline void send_byte(uint8_t c) {
    while (!(UCSR1A & _BV(UDRE1)));
 2f0:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2f4:	95 ff       	sbrs	r25, 5
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <__vector_25+0x54>
    UDR1 = c;
 2f8:	93 e3       	ldi	r25, 0x33	; 51
 2fa:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2fe:	57 c0       	rjmp	.+174    	; 0x3ae <__vector_25+0x112>
            send_byte(RESP_SYNC_OK);
        }
        else state = OUT_OF_SYNC;
    } else if (state == SYNCED) {
 300:	91 11       	cpse	r25, r1
 302:	55 c0       	rjmp	.+170    	; 0x3ae <__vector_25+0x112>

        if (usbInput.received_bytes < 8) {
 304:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <usbInput+0x9>
 308:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <usbInput+0x8>
 30c:	e8 30       	cpi	r30, 0x08	; 8
 30e:	98 f4       	brcc	.+38     	; 0x336 <__vector_25+0x9a>
            // Still filling up the buffer
            usbInput.input[usbInput.received_bytes++] = b;
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	2e 0f       	add	r18, r30
 314:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <usbInput+0x9>
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	e6 5f       	subi	r30, 0xF6	; 246
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	80 83       	st	Z, r24

static __inline__ uint8_t
_crc8_ccitt_update(uint8_t __crc, uint8_t __data)
{
    uint8_t __i, __pattern;
    __asm__ __volatile__ (
 320:	98 27       	eor	r25, r24
 322:	28 e0       	ldi	r18, 0x08	; 8
 324:	37 e0       	ldi	r19, 0x07	; 7
 326:	99 0f       	add	r25, r25
 328:	08 f4       	brcc	.+2      	; 0x32c <__vector_25+0x90>
 32a:	93 27       	eor	r25, r19
 32c:	2a 95       	dec	r18
 32e:	d9 f7       	brne	.-10     	; 0x326 <__vector_25+0x8a>
            usbInput.crc8_ccitt = _crc8_ccitt_update(usbInput.crc8_ccitt, b);
 330:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <usbInput+0x8>
 334:	3c c0       	rjmp	.+120    	; 0x3ae <__vector_25+0x112>

        } else {
            if (usbInput.crc8_ccitt != b) {
 336:	98 17       	cp	r25, r24
 338:	99 f0       	breq	.+38     	; 0x360 <__vector_25+0xc4>
                if (b == COMMAND_SYNC_START) {
 33a:	8f 3f       	cpi	r24, 0xFF	; 255
 33c:	49 f4       	brne	.+18     	; 0x350 <__vector_25+0xb4>
                    // Start sync
                    state = SYNC_START;
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
inline void enable_rx_isr(void) {
    UCSR1B |= _BV(RXCIE1);
}

inline void send_byte(uint8_t c) {
    while (!(UCSR1A & _BV(UDRE1)));
 344:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 348:	95 ff       	sbrs	r25, 5
 34a:	fc cf       	rjmp	.-8      	; 0x344 <__vector_25+0xa8>
    UDR1 = c;
 34c:	9f ef       	ldi	r25, 0xFF	; 255
 34e:	05 c0       	rjmp	.+10     	; 0x35a <__vector_25+0xbe>
inline void enable_rx_isr(void) {
    UCSR1B |= _BV(RXCIE1);
}

inline void send_byte(uint8_t c) {
    while (!(UCSR1A & _BV(UDRE1)));
 350:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 354:	95 ff       	sbrs	r25, 5
 356:	fc cf       	rjmp	.-8      	; 0x350 <__vector_25+0xb4>
    UDR1 = c;
 358:	92 e9       	ldi	r25, 0x92	; 146
 35a:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 35e:	23 c0       	rjmp	.+70     	; 0x3a6 <__vector_25+0x10a>
                    PRINT_DEBUG("Packet data: %02x %02x %02x %02x %02x %02x %02x %02x %02x\n", usbInput.input[0], usbInput.input[1], usbInput.input[2], usbInput.input[3], usbInput.input[4], usbInput.input[5], usbInput.input[6], usbInput.input[7], b);
                }
                
            } else {
                // Everything is ok
                buffer.Button = (usbInput.input[0] << 8) | usbInput.input[1];
 360:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <usbInput>
 364:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <usbInput+0x1>
 368:	32 27       	eor	r19, r18
 36a:	23 27       	eor	r18, r19
 36c:	32 27       	eor	r19, r18
 36e:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <buffer+0x1>
 372:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <buffer>
                buffer.HAT = usbInput.input[2];
 376:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <usbInput+0x2>
 37a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <buffer+0x2>
                buffer.LX = usbInput.input[3];
 37e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <usbInput+0x3>
 382:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <buffer+0x3>
                buffer.LY = usbInput.input[4];
 386:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <usbInput+0x4>
 38a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <buffer+0x4>
                buffer.RX = usbInput.input[5];
 38e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <usbInput+0x5>
 392:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <buffer+0x5>
                buffer.RY = usbInput.input[6];
 396:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <usbInput+0x6>
 39a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <buffer+0x6>
                buffer.VendorSpec = usbInput.input[7];
 39e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <usbInput+0x7>
 3a2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <buffer+0x7>
                // send_byte(RESP_UPDATE_ACK);
            }
            usbInput.received_bytes = 0;
 3a6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <usbInput+0x9>
            usbInput.crc8_ccitt = 0;
 3aa:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <usbInput+0x8>
        }
    }
    if (state == OUT_OF_SYNC) {
 3ae:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 3b2:	93 30       	cpi	r25, 0x03	; 3
 3b4:	61 f4       	brne	.+24     	; 0x3ce <__vector_25+0x132>
        if (b == COMMAND_SYNC_START) {
 3b6:	8f 3f       	cpi	r24, 0xFF	; 255
 3b8:	51 f4       	brne	.+20     	; 0x3ce <__vector_25+0x132>
            state = SYNC_START;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
inline void enable_rx_isr(void) {
    UCSR1B |= _BV(RXCIE1);
}

inline void send_byte(uint8_t c) {
    while (!(UCSR1A & _BV(UDRE1)));
 3c0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 3c4:	85 ff       	sbrs	r24, 5
 3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <__vector_25+0x124>
    UDR1 = c;
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
            send_byte(RESP_SYNC_START);
        }
    }
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <SetupHardware>:
        USB_USBTask();
    }
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
 3e4:	0b df       	rcall	.-490    	; 0x1fc <disable_watchdog>
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	80 e8       	ldi	r24, 0x80	; 128
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3f2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	9b e4       	ldi	r25, 0x4B	; 75
 3fc:	d5 de       	rcall	.-598    	; 0x1a8 <USART_Init>
 3fe:	bc c2       	rjmp	.+1400   	; 0x978 <USB_Init>

00000400 <EVENT_USB_Device_Connect>:
 400:	08 95       	ret

00000402 <EVENT_USB_Device_Disconnect>:
 402:	08 95       	ret

00000404 <EVENT_USB_Device_ConfigurationChanged>:
 404:	42 e3       	ldi	r20, 0x32	; 50
 406:	60 ec       	ldi	r22, 0xC0	; 192
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	ef d1       	rcall	.+990    	; 0x7ea <Endpoint_ConfigureEndpoint_Prv>
 40c:	42 e3       	ldi	r20, 0x32	; 50
 40e:	61 ec       	ldi	r22, 0xC1	; 193
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	eb c1       	rjmp	.+982    	; 0x7ea <Endpoint_ConfigureEndpoint_Prv>

00000414 <EVENT_USB_Device_ControlRequest>:
 414:	08 95       	ret

00000416 <HID_Task>:
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	28 97       	sbiw	r28, 0x08	; 8
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	de bf       	out	0x3e, r29	; 62
 426:	0f be       	out	0x3f, r0	; 63
 428:	cd bf       	out	0x3d, r28	; 61
 42a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 42e:	84 30       	cpi	r24, 0x04	; 4
 430:	09 f0       	breq	.+2      	; 0x434 <HID_Task+0x1e>
 432:	56 c0       	rjmp	.+172    	; 0x4e0 <HID_Task+0xca>
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 43a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 43e:	82 ff       	sbrs	r24, 2
 440:	12 c0       	rjmp	.+36     	; 0x466 <HID_Task+0x50>
 442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 446:	85 ff       	sbrs	r24, 5
 448:	09 c0       	rjmp	.+18     	; 0x45c <HID_Task+0x46>
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	67 e0       	ldi	r22, 0x07	; 7
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	ce 01       	movw	r24, r28
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	bc d0       	rcall	.+376    	; 0x5d0 <Endpoint_Read_Stream_LE>
 458:	81 11       	cpse	r24, r1
 45a:	f7 cf       	rjmp	.-18     	; 0x44a <HID_Task+0x34>
 45c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 460:	8b 77       	andi	r24, 0x7B	; 123
 462:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 46c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 470:	80 ff       	sbrs	r24, 0
 472:	36 c0       	rjmp	.+108    	; 0x4e0 <HID_Task+0xca>
 474:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 478:	8f 77       	andi	r24, 0x7F	; 127
 47a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 47e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 482:	81 11       	cpse	r24, r1
 484:	11 c0       	rjmp	.+34     	; 0x4a8 <HID_Task+0x92>
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	e4 e1       	ldi	r30, 0x14	; 20
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	de 01       	movw	r26, r28
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
 496:	e1 f7       	brne	.-8      	; 0x490 <HID_Task+0x7a>
 498:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 49c:	85 ff       	sbrs	r24, 5
 49e:	fc cf       	rjmp	.-8      	; 0x498 <HID_Task+0x82>
 4a0:	80 e9       	ldi	r24, 0x90	; 144
 4a2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 4a6:	09 c0       	rjmp	.+18     	; 0x4ba <HID_Task+0xa4>
 4a8:	88 e0       	ldi	r24, 0x08	; 8
 4aa:	e2 e0       	ldi	r30, 0x02	; 2
 4ac:	f1 e0       	ldi	r31, 0x01	; 1
 4ae:	de 01       	movw	r26, r28
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	01 90       	ld	r0, Z+
 4b4:	0d 92       	st	X+, r0
 4b6:	8a 95       	dec	r24
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <HID_Task+0x9c>
 4ba:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	68 e0       	ldi	r22, 0x08	; 8
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	ce 01       	movw	r24, r28
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	35 d0       	rcall	.+106    	; 0x53c <Endpoint_Write_Stream_LE>
 4d2:	81 11       	cpse	r24, r1
 4d4:	f7 cf       	rjmp	.-18     	; 0x4c4 <HID_Task+0xae>
 4d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4da:	8e 77       	andi	r24, 0x7E	; 126
 4dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4e0:	28 96       	adiw	r28, 0x08	; 8
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <main>:
 4f2:	88 e0       	ldi	r24, 0x08	; 8
 4f4:	e2 e0       	ldi	r30, 0x02	; 2
 4f6:	f1 e0       	ldi	r31, 0x01	; 1
 4f8:	df 01       	movw	r26, r30
 4fa:	98 2f       	mov	r25, r24
 4fc:	1d 92       	st	X+, r1
 4fe:	9a 95       	dec	r25
 500:	e9 f7       	brne	.-6      	; 0x4fc <main+0xa>
 502:	90 e8       	ldi	r25, 0x80	; 128
 504:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x3>
 508:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end+0x4>
 50c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x5>
 510:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__data_end+0x6>
 514:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
 518:	a4 e1       	ldi	r26, 0x14	; 20
 51a:	b1 e0       	ldi	r27, 0x01	; 1
 51c:	01 90       	ld	r0, Z+
 51e:	0d 92       	st	X+, r0
 520:	8a 95       	dec	r24
 522:	e1 f7       	brne	.-8      	; 0x51c <main+0x2a>
 524:	8a e0       	ldi	r24, 0x0A	; 10
 526:	ea e0       	ldi	r30, 0x0A	; 10
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	df 01       	movw	r26, r30
 52c:	1d 92       	st	X+, r1
 52e:	8a 95       	dec	r24
 530:	e9 f7       	brne	.-6      	; 0x52c <main+0x3a>
 532:	58 df       	rcall	.-336    	; 0x3e4 <SetupHardware>
 534:	78 94       	sei
 536:	6f df       	rcall	.-290    	; 0x416 <HID_Task>
 538:	64 d4       	rcall	.+2248   	; 0xe02 <USB_USBTask>
 53a:	fd cf       	rjmp	.-6      	; 0x536 <main+0x44>

0000053c <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 53c:	cf 92       	push	r12
 53e:	df 92       	push	r13
 540:	ef 92       	push	r14
 542:	ff 92       	push	r15
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ec 01       	movw	r28, r24
 54e:	8b 01       	movw	r16, r22
 550:	7a 01       	movw	r14, r20
 552:	9f d1       	rcall	.+830    	; 0x892 <Endpoint_WaitUntilReady>
 554:	81 11       	cpse	r24, r1
 556:	33 c0       	rjmp	.+102    	; 0x5be <Endpoint_Write_Stream_LE+0x82>
 558:	e1 14       	cp	r14, r1
 55a:	f1 04       	cpc	r15, r1
 55c:	39 f0       	breq	.+14     	; 0x56c <Endpoint_Write_Stream_LE+0x30>
 55e:	f7 01       	movw	r30, r14
 560:	80 81       	ld	r24, Z
 562:	91 81       	ldd	r25, Z+1	; 0x01
 564:	08 1b       	sub	r16, r24
 566:	19 0b       	sbc	r17, r25
 568:	c8 0f       	add	r28, r24
 56a:	d9 1f       	adc	r29, r25
 56c:	c1 2c       	mov	r12, r1
 56e:	d1 2c       	mov	r13, r1
 570:	01 15       	cp	r16, r1
 572:	11 05       	cpc	r17, r1
 574:	19 f1       	breq	.+70     	; 0x5bc <Endpoint_Write_Stream_LE+0x80>
 576:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 57a:	85 fd       	sbrc	r24, 5
 57c:	16 c0       	rjmp	.+44     	; 0x5aa <Endpoint_Write_Stream_LE+0x6e>
 57e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 582:	8e 77       	andi	r24, 0x7E	; 126
 584:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 588:	3c d4       	rcall	.+2168   	; 0xe02 <USB_USBTask>
 58a:	e1 14       	cp	r14, r1
 58c:	f1 04       	cpc	r15, r1
 58e:	49 f0       	breq	.+18     	; 0x5a2 <Endpoint_Write_Stream_LE+0x66>
 590:	f7 01       	movw	r30, r14
 592:	80 81       	ld	r24, Z
 594:	91 81       	ldd	r25, Z+1	; 0x01
 596:	c8 0e       	add	r12, r24
 598:	d9 1e       	adc	r13, r25
 59a:	d1 82       	std	Z+1, r13	; 0x01
 59c:	c0 82       	st	Z, r12
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	0e c0       	rjmp	.+28     	; 0x5be <Endpoint_Write_Stream_LE+0x82>
 5a2:	77 d1       	rcall	.+750    	; 0x892 <Endpoint_WaitUntilReady>
 5a4:	88 23       	and	r24, r24
 5a6:	21 f3       	breq	.-56     	; 0x570 <Endpoint_Write_Stream_LE+0x34>
 5a8:	0a c0       	rjmp	.+20     	; 0x5be <Endpoint_Write_Stream_LE+0x82>
 5aa:	89 91       	ld	r24, Y+
 5ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 5b0:	01 50       	subi	r16, 0x01	; 1
 5b2:	11 09       	sbc	r17, r1
 5b4:	ff ef       	ldi	r31, 0xFF	; 255
 5b6:	cf 1a       	sub	r12, r31
 5b8:	df 0a       	sbc	r13, r31
 5ba:	da cf       	rjmp	.-76     	; 0x570 <Endpoint_Write_Stream_LE+0x34>
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	df 90       	pop	r13
 5cc:	cf 90       	pop	r12
 5ce:	08 95       	ret

000005d0 <Endpoint_Read_Stream_LE>:
 5d0:	cf 92       	push	r12
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	ec 01       	movw	r28, r24
 5e2:	8b 01       	movw	r16, r22
 5e4:	7a 01       	movw	r14, r20
 5e6:	55 d1       	rcall	.+682    	; 0x892 <Endpoint_WaitUntilReady>
 5e8:	81 11       	cpse	r24, r1
 5ea:	33 c0       	rjmp	.+102    	; 0x652 <Endpoint_Read_Stream_LE+0x82>
 5ec:	e1 14       	cp	r14, r1
 5ee:	f1 04       	cpc	r15, r1
 5f0:	39 f0       	breq	.+14     	; 0x600 <Endpoint_Read_Stream_LE+0x30>
 5f2:	f7 01       	movw	r30, r14
 5f4:	80 81       	ld	r24, Z
 5f6:	91 81       	ldd	r25, Z+1	; 0x01
 5f8:	08 1b       	sub	r16, r24
 5fa:	19 0b       	sbc	r17, r25
 5fc:	c8 0f       	add	r28, r24
 5fe:	d9 1f       	adc	r29, r25
 600:	c1 2c       	mov	r12, r1
 602:	d1 2c       	mov	r13, r1
 604:	01 15       	cp	r16, r1
 606:	11 05       	cpc	r17, r1
 608:	19 f1       	breq	.+70     	; 0x650 <Endpoint_Read_Stream_LE+0x80>
 60a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 60e:	85 fd       	sbrc	r24, 5
 610:	16 c0       	rjmp	.+44     	; 0x63e <Endpoint_Read_Stream_LE+0x6e>
 612:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 616:	8b 77       	andi	r24, 0x7B	; 123
 618:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 61c:	f2 d3       	rcall	.+2020   	; 0xe02 <USB_USBTask>
 61e:	e1 14       	cp	r14, r1
 620:	f1 04       	cpc	r15, r1
 622:	49 f0       	breq	.+18     	; 0x636 <Endpoint_Read_Stream_LE+0x66>
 624:	f7 01       	movw	r30, r14
 626:	80 81       	ld	r24, Z
 628:	91 81       	ldd	r25, Z+1	; 0x01
 62a:	c8 0e       	add	r12, r24
 62c:	d9 1e       	adc	r13, r25
 62e:	d1 82       	std	Z+1, r13	; 0x01
 630:	c0 82       	st	Z, r12
 632:	85 e0       	ldi	r24, 0x05	; 5
 634:	0e c0       	rjmp	.+28     	; 0x652 <Endpoint_Read_Stream_LE+0x82>
 636:	2d d1       	rcall	.+602    	; 0x892 <Endpoint_WaitUntilReady>
 638:	88 23       	and	r24, r24
 63a:	21 f3       	breq	.-56     	; 0x604 <Endpoint_Read_Stream_LE+0x34>
 63c:	0a c0       	rjmp	.+20     	; 0x652 <Endpoint_Read_Stream_LE+0x82>
 63e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 642:	89 93       	st	Y+, r24
 644:	01 50       	subi	r16, 0x01	; 1
 646:	11 09       	sbc	r17, r1
 648:	ff ef       	ldi	r31, 0xFF	; 255
 64a:	cf 1a       	sub	r12, r31
 64c:	df 0a       	sbc	r13, r31
 64e:	da cf       	rjmp	.-76     	; 0x604 <Endpoint_Read_Stream_LE+0x34>
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	ef 90       	pop	r14
 65e:	df 90       	pop	r13
 660:	cf 90       	pop	r12
 662:	08 95       	ret

00000664 <Endpoint_Write_Control_Stream_LE>:
 664:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <USB_ControlRequest+0x6>
 668:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <USB_ControlRequest+0x7>
 66c:	26 17       	cp	r18, r22
 66e:	37 07       	cpc	r19, r23
 670:	48 f0       	brcs	.+18     	; 0x684 <Endpoint_Write_Control_Stream_LE+0x20>
 672:	61 15       	cp	r22, r1
 674:	71 05       	cpc	r23, r1
 676:	39 f4       	brne	.+14     	; 0x686 <Endpoint_Write_Control_Stream_LE+0x22>
 678:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 67c:	2e 77       	andi	r18, 0x7E	; 126
 67e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 682:	01 c0       	rjmp	.+2      	; 0x686 <Endpoint_Write_Control_Stream_LE+0x22>
 684:	b9 01       	movw	r22, r18
 686:	fc 01       	movw	r30, r24
 688:	20 e0       	ldi	r18, 0x00	; 0
 68a:	61 15       	cp	r22, r1
 68c:	71 05       	cpc	r23, r1
 68e:	91 f1       	breq	.+100    	; 0x6f4 <Endpoint_Write_Control_Stream_LE+0x90>
 690:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 694:	88 23       	and	r24, r24
 696:	09 f4       	brne	.+2      	; 0x69a <Endpoint_Write_Control_Stream_LE+0x36>
 698:	40 c0       	rjmp	.+128    	; 0x71a <Endpoint_Write_Control_Stream_LE+0xb6>
 69a:	85 30       	cpi	r24, 0x05	; 5
 69c:	09 f4       	brne	.+2      	; 0x6a0 <Endpoint_Write_Control_Stream_LE+0x3c>
 69e:	3f c0       	rjmp	.+126    	; 0x71e <Endpoint_Write_Control_Stream_LE+0xba>
 6a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6a4:	83 fd       	sbrc	r24, 3
 6a6:	3d c0       	rjmp	.+122    	; 0x722 <Endpoint_Write_Control_Stream_LE+0xbe>
 6a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ac:	82 fd       	sbrc	r24, 2
 6ae:	2f c0       	rjmp	.+94     	; 0x70e <Endpoint_Write_Control_Stream_LE+0xaa>
 6b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6b4:	80 ff       	sbrs	r24, 0
 6b6:	e9 cf       	rjmp	.-46     	; 0x68a <Endpoint_Write_Control_Stream_LE+0x26>
 6b8:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 6bc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	92 2b       	or	r25, r18
 6c4:	61 15       	cp	r22, r1
 6c6:	71 05       	cpc	r23, r1
 6c8:	51 f0       	breq	.+20     	; 0x6de <Endpoint_Write_Control_Stream_LE+0x7a>
 6ca:	80 34       	cpi	r24, 0x40	; 64
 6cc:	91 05       	cpc	r25, r1
 6ce:	38 f4       	brcc	.+14     	; 0x6de <Endpoint_Write_Control_Stream_LE+0x7a>
 6d0:	21 91       	ld	r18, Z+
 6d2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 6d6:	61 50       	subi	r22, 0x01	; 1
 6d8:	71 09       	sbc	r23, r1
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	f3 cf       	rjmp	.-26     	; 0x6c4 <Endpoint_Write_Control_Stream_LE+0x60>
 6de:	21 e0       	ldi	r18, 0x01	; 1
 6e0:	80 34       	cpi	r24, 0x40	; 64
 6e2:	91 05       	cpc	r25, r1
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <Endpoint_Write_Control_Stream_LE+0x84>
 6e6:	20 e0       	ldi	r18, 0x00	; 0
 6e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ec:	8e 77       	andi	r24, 0x7E	; 126
 6ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f2:	cb cf       	rjmp	.-106    	; 0x68a <Endpoint_Write_Control_Stream_LE+0x26>
 6f4:	21 11       	cpse	r18, r1
 6f6:	cc cf       	rjmp	.-104    	; 0x690 <Endpoint_Write_Control_Stream_LE+0x2c>
 6f8:	0a c0       	rjmp	.+20     	; 0x70e <Endpoint_Write_Control_Stream_LE+0xaa>
 6fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 6fe:	88 23       	and	r24, r24
 700:	61 f0       	breq	.+24     	; 0x71a <Endpoint_Write_Control_Stream_LE+0xb6>
 702:	85 30       	cpi	r24, 0x05	; 5
 704:	61 f0       	breq	.+24     	; 0x71e <Endpoint_Write_Control_Stream_LE+0xba>
 706:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 70a:	83 fd       	sbrc	r24, 3
 70c:	0a c0       	rjmp	.+20     	; 0x722 <Endpoint_Write_Control_Stream_LE+0xbe>
 70e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 712:	82 ff       	sbrs	r24, 2
 714:	f2 cf       	rjmp	.-28     	; 0x6fa <Endpoint_Write_Control_Stream_LE+0x96>
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	08 95       	ret
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	08 95       	ret
 71e:	83 e0       	ldi	r24, 0x03	; 3
 720:	08 95       	ret
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	08 95       	ret

00000726 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 726:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <USB_ControlRequest+0x6>
 72a:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <USB_ControlRequest+0x7>
 72e:	26 17       	cp	r18, r22
 730:	37 07       	cpc	r19, r23
 732:	48 f0       	brcs	.+18     	; 0x746 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 734:	61 15       	cp	r22, r1
 736:	71 05       	cpc	r23, r1
 738:	39 f4       	brne	.+14     	; 0x748 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 73a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 73e:	2e 77       	andi	r18, 0x7E	; 126
 740:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 744:	01 c0       	rjmp	.+2      	; 0x748 <Endpoint_Write_Control_PStream_LE+0x22>
 746:	b9 01       	movw	r22, r18
 748:	fc 01       	movw	r30, r24
 74a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 74c:	61 15       	cp	r22, r1
 74e:	71 05       	cpc	r23, r1
 750:	99 f1       	breq	.+102    	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 752:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 756:	88 23       	and	r24, r24
 758:	09 f4       	brne	.+2      	; 0x75c <Endpoint_Write_Control_PStream_LE+0x36>
 75a:	41 c0       	rjmp	.+130    	; 0x7de <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 75c:	85 30       	cpi	r24, 0x05	; 5
 75e:	09 f4       	brne	.+2      	; 0x762 <Endpoint_Write_Control_PStream_LE+0x3c>
 760:	40 c0       	rjmp	.+128    	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 766:	83 fd       	sbrc	r24, 3
 768:	3e c0       	rjmp	.+124    	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 76a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 76e:	82 fd       	sbrc	r24, 2
 770:	30 c0       	rjmp	.+96     	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 772:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 776:	80 ff       	sbrs	r24, 0
 778:	e9 cf       	rjmp	.-46     	; 0x74c <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 77a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 77e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 786:	61 15       	cp	r22, r1
 788:	71 05       	cpc	r23, r1
 78a:	59 f0       	breq	.+22     	; 0x7a2 <Endpoint_Write_Control_PStream_LE+0x7c>
 78c:	80 34       	cpi	r24, 0x40	; 64
 78e:	91 05       	cpc	r25, r1
 790:	40 f4       	brcc	.+16     	; 0x7a2 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 792:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 794:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 798:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 79a:	61 50       	subi	r22, 0x01	; 1
 79c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	f2 cf       	rjmp	.-28     	; 0x786 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 7a2:	21 e0       	ldi	r18, 0x01	; 1
 7a4:	80 34       	cpi	r24, 0x40	; 64
 7a6:	91 05       	cpc	r25, r1
 7a8:	09 f0       	breq	.+2      	; 0x7ac <Endpoint_Write_Control_PStream_LE+0x86>
 7aa:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b0:	8e 77       	andi	r24, 0x7E	; 126
 7b2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b6:	ca cf       	rjmp	.-108    	; 0x74c <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7b8:	21 11       	cpse	r18, r1
 7ba:	cb cf       	rjmp	.-106    	; 0x752 <Endpoint_Write_Control_PStream_LE+0x2c>
 7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7c2:	88 23       	and	r24, r24
 7c4:	61 f0       	breq	.+24     	; 0x7de <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7c6:	85 30       	cpi	r24, 0x05	; 5
 7c8:	61 f0       	breq	.+24     	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7ce:	83 fd       	sbrc	r24, 3
 7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7d6:	82 ff       	sbrs	r24, 2
 7d8:	f2 cf       	rjmp	.-28     	; 0x7be <Endpoint_Write_Control_PStream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 7de:	82 e0       	ldi	r24, 0x02	; 2
 7e0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 7e6:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7e8:	08 95       	ret

000007ea <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 7ea:	98 2f       	mov	r25, r24
 7ec:	97 30       	cpi	r25, 0x07	; 7
 7ee:	68 f5       	brcc	.+90     	; 0x84a <Endpoint_ConfigureEndpoint_Prv+0x60>
 7f0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 7f4:	98 17       	cp	r25, r24
 7f6:	39 f0       	breq	.+14     	; 0x806 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 7f8:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 7fc:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 800:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 804:	03 c0       	rjmp	.+6      	; 0x80c <Endpoint_ConfigureEndpoint_Prv+0x22>
 806:	24 2f       	mov	r18, r20
 808:	76 2f       	mov	r23, r22
 80a:	50 e0       	ldi	r21, 0x00	; 0
 80c:	21 fd       	sbrc	r18, 1
 80e:	02 c0       	rjmp	.+4      	; 0x814 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 810:	9f 5f       	subi	r25, 0xFF	; 255
 812:	ec cf       	rjmp	.-40     	; 0x7ec <Endpoint_ConfigureEndpoint_Prv+0x2>
 814:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 818:	3e 7f       	andi	r19, 0xFE	; 254
 81a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 81e:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 822:	3d 7f       	andi	r19, 0xFD	; 253
 824:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 828:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 82c:	31 60       	ori	r19, 0x01	; 1
 82e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 832:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 836:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 83a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 83e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 842:	27 fd       	sbrc	r18, 7
 844:	e5 cf       	rjmp	.-54     	; 0x810 <Endpoint_ConfigureEndpoint_Prv+0x26>
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	08 95       	ret
 84a:	8f 70       	andi	r24, 0x0F	; 15
 84c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	08 95       	ret

00000854 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 854:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest>
 858:	87 ff       	sbrs	r24, 7
 85a:	11 c0       	rjmp	.+34     	; 0x87e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 85c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 860:	82 fd       	sbrc	r24, 2
 862:	05 c0       	rjmp	.+10     	; 0x86e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 864:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 868:	81 11       	cpse	r24, r1
 86a:	f8 cf       	rjmp	.-16     	; 0x85c <Endpoint_ClearStatusStage+0x8>
 86c:	11 c0       	rjmp	.+34     	; 0x890 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 86e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 872:	8b 77       	andi	r24, 0x7B	; 123
 874:	0b c0       	rjmp	.+22     	; 0x88c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 876:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 87a:	88 23       	and	r24, r24
 87c:	49 f0       	breq	.+18     	; 0x890 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 87e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 882:	80 ff       	sbrs	r24, 0
 884:	f8 cf       	rjmp	.-16     	; 0x876 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 886:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 88a:	8e 77       	andi	r24, 0x7E	; 126
 88c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 890:	08 95       	ret

00000892 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 892:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 896:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 89a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 89c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 8a0:	84 2f       	mov	r24, r20
 8a2:	81 70       	andi	r24, 0x01	; 1
 8a4:	40 ff       	sbrs	r20, 0
 8a6:	23 c0       	rjmp	.+70     	; 0x8ee <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 8ac:	80 fd       	sbrc	r24, 0
 8ae:	1d c0       	rjmp	.+58     	; 0x8ea <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8b0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8b4:	88 23       	and	r24, r24
 8b6:	99 f0       	breq	.+38     	; 0x8de <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8b8:	85 30       	cpi	r24, 0x05	; 5
 8ba:	99 f0       	breq	.+38     	; 0x8e2 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8bc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 8c0:	85 fd       	sbrc	r24, 5
 8c2:	11 c0       	rjmp	.+34     	; 0x8e6 <Endpoint_WaitUntilReady+0x54>
 8c4:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 8c8:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8cc:	24 17       	cp	r18, r20
 8ce:	35 07       	cpc	r19, r21
 8d0:	29 f3       	breq	.-54     	; 0x89c <Endpoint_WaitUntilReady+0xa>
 8d2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8d4:	11 f0       	breq	.+4      	; 0x8da <Endpoint_WaitUntilReady+0x48>
 8d6:	9a 01       	movw	r18, r20
 8d8:	e1 cf       	rjmp	.-62     	; 0x89c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 8da:	84 e0       	ldi	r24, 0x04	; 4
 8dc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8de:	82 e0       	ldi	r24, 0x02	; 2
 8e0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 8e2:	83 e0       	ldi	r24, 0x03	; 3
 8e4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8ee:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8f2:	42 ff       	sbrs	r20, 2
 8f4:	dd cf       	rjmp	.-70     	; 0x8b0 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 8f6:	08 95       	ret

000008f8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 8fe:	df 93       	push	r29
 900:	4b d0       	rcall	.+150    	; 0x998 <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 902:	52 d0       	rcall	.+164    	; 0x9a8 <USB_INT_ClearAllInterrupts>
 904:	c8 ed       	ldi	r28, 0xD8	; 216
 906:	d0 e0       	ldi	r29, 0x00	; 0
 908:	88 81       	ld	r24, Y
 90a:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
 90c:	88 83       	st	Y, r24
 90e:	88 81       	ld	r24, Y
 910:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 912:	88 83       	st	Y, r24
 914:	88 81       	ld	r24, Y
 916:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 918:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 91a:	19 bc       	out	0x29, r1	; 41
 91c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
 920:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 924:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 928:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 92c:	00 ee       	ldi	r16, 0xE0	; 224
 92e:	10 e0       	ldi	r17, 0x00	; 0
 930:	f8 01       	movw	r30, r16
 932:	80 81       	ld	r24, Z
 934:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 936:	80 83       	st	Z, r24
 938:	88 81       	ld	r24, Y
 93a:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 93c:	88 83       	st	Y, r24
 93e:	42 e3       	ldi	r20, 0x32	; 50
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 944:	52 df       	rcall	.-348    	; 0x7ea <Endpoint_ConfigureEndpoint_Prv>
 946:	e1 ee       	ldi	r30, 0xE1	; 225
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 94e:	80 83       	st	Z, r24
 950:	e2 ee       	ldi	r30, 0xE2	; 226
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
 956:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 958:	80 83       	st	Z, r24
 95a:	80 81       	ld	r24, Z
 95c:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 95e:	80 83       	st	Z, r24
 960:	f8 01       	movw	r30, r16
 962:	80 81       	ld	r24, Z
 964:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 966:	80 83       	st	Z, r24
 968:	88 81       	ld	r24, Y
 96a:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 96c:	88 83       	st	Y, r24
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	1f 91       	pop	r17
 974:	0f 91       	pop	r16
 976:	08 95       	ret

00000978 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 978:	e8 ed       	ldi	r30, 0xD8	; 216
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	8f 7e       	andi	r24, 0xEF	; 239
 980:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 982:	e7 ed       	ldi	r30, 0xD7	; 215
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	81 60       	ori	r24, 0x01	; 1
 98a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 98c:	84 e0       	ldi	r24, 0x04	; 4
 98e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_IsInitialized>
 996:	b0 cf       	rjmp	.-160    	; 0x8f8 <USB_ResetInterface>

00000998 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 998:	e8 ed       	ldi	r30, 0xD8	; 216
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	8e 7f       	andi	r24, 0xFE	; 254
 9a0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 9a2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9a6:	08 95       	ret

000009a8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 9a8:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 9ac:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 9b0:	08 95       	ret

000009b2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 9b2:	1f 92       	push	r1
 9b4:	0f 92       	push	r0
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	0f 92       	push	r0
 9ba:	11 24       	eor	r1, r1
 9bc:	2f 93       	push	r18
 9be:	3f 93       	push	r19
 9c0:	4f 93       	push	r20
 9c2:	5f 93       	push	r21
 9c4:	6f 93       	push	r22
 9c6:	7f 93       	push	r23
 9c8:	8f 93       	push	r24
 9ca:	9f 93       	push	r25
 9cc:	af 93       	push	r26
 9ce:	bf 93       	push	r27
 9d0:	ef 93       	push	r30
 9d2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 9d4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 9d8:	82 ff       	sbrs	r24, 2
 9da:	0a c0       	rjmp	.+20     	; 0x9f0 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 9dc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9e0:	82 ff       	sbrs	r24, 2
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 9e4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 9e8:	8b 7f       	andi	r24, 0xFB	; 251
 9ea:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 9ee:	08 d2       	rcall	.+1040   	; 0xe00 <USB_Event_Stub>
 9f0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 9f4:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 9f6:	1d c0       	rjmp	.+58     	; 0xa32 <__vector_10+0x80>
 9f8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 9fc:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 9fe:	19 c0       	rjmp	.+50     	; 0xa32 <__vector_10+0x80>
 a00:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 a04:	8e 7f       	andi	r24, 0xFE	; 254
 a06:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 a0a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 a0e:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a10:	0c c0       	rjmp	.+24     	; 0xa2a <__vector_10+0x78>
 a12:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a14:	89 bd       	out	0x29, r24	; 41
 a16:	82 e1       	ldi	r24, 0x12	; 18
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 a18:	89 bd       	out	0x29, r24	; 41
 a1a:	09 b4       	in	r0, 0x29	; 41
 a1c:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 a1e:	fd cf       	rjmp	.-6      	; 0xa1a <__vector_10+0x68>
 a20:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
 a22:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
 a26:	ec dc       	rcall	.-1576   	; 0x400 <EVENT_USB_Device_Connect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <__vector_10+0x80>
			EVENT_USB_Device_Disconnect();
 a2a:	19 bc       	out	0x29, r1	; 41
 a2c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <USB_DeviceState>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a30:	e8 dc       	rcall	.-1584   	; 0x402 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a32:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a36:	80 ff       	sbrs	r24, 0
 a38:	18 c0       	rjmp	.+48     	; 0xa6a <__vector_10+0xb8>
 a3a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a3e:	80 ff       	sbrs	r24, 0
 a40:	14 c0       	rjmp	.+40     	; 0xa6a <__vector_10+0xb8>
 a42:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a46:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a48:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a50:	80 61       	ori	r24, 0x10	; 16
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a52:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a56:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a5a:	80 62       	ori	r24, 0x20	; 32

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 a5c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		EVENT_USB_Device_Suspend();
 a60:	19 bc       	out	0x29, r1	; 41
 a62:	85 e0       	ldi	r24, 0x05	; 5
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 a64:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 a68:	cb d1       	rcall	.+918    	; 0xe00 <USB_Event_Stub>
 a6a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 a6e:	84 ff       	sbrs	r24, 4
 a70:	2f c0       	rjmp	.+94     	; 0xad0 <__vector_10+0x11e>
 a72:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a76:	84 ff       	sbrs	r24, 4
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a78:	2b c0       	rjmp	.+86     	; 0xad0 <__vector_10+0x11e>
 a7a:	80 e1       	ldi	r24, 0x10	; 16
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a7c:	89 bd       	out	0x29, r24	; 41
 a7e:	82 e1       	ldi	r24, 0x12	; 18
 a80:	89 bd       	out	0x29, r24	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a82:	09 b4       	in	r0, 0x29	; 41
 a84:	00 fe       	sbrs	r0, 0
 a86:	fd cf       	rjmp	.-6      	; 0xa82 <__vector_10+0xd0>
 a88:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 a8c:	8f 7d       	andi	r24, 0xDF	; 223
 a8e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a92:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 a96:	8f 7e       	andi	r24, 0xEF	; 239
 a98:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 aa0:	8f 7e       	andi	r24, 0xEF	; 239
 aa2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 aa6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 aaa:	81 60       	ori	r24, 0x01	; 1
 aac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ab0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
 ab4:	88 23       	and	r24, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ab6:	11 f0       	breq	.+4      	; 0xabc <__vector_10+0x10a>
 ab8:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 aba:	07 c0       	rjmp	.+14     	; 0xaca <__vector_10+0x118>
 abc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 ac0:	87 fd       	sbrc	r24, 7
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <__vector_10+0x116>
 ac4:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <__vector_10+0x118>
 ac8:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 aca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 ace:	98 d1       	rcall	.+816    	; 0xe00 <USB_Event_Stub>
 ad0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 ad4:	83 ff       	sbrs	r24, 3
 ad6:	22 c0       	rjmp	.+68     	; 0xb1c <__stack+0x1d>
 ad8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 adc:	83 ff       	sbrs	r24, 3
 ade:	1e c0       	rjmp	.+60     	; 0xb1c <__stack+0x1d>
 ae0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 ae4:	87 7f       	andi	r24, 0xF7	; 247
 ae6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		USB_Device_ConfigurationNumber = 0;
 aea:	82 e0       	ldi	r24, 0x02	; 2
 aec:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 af0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_Device_ConfigurationNumber>
 af4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 af8:	8e 7f       	andi	r24, 0xFE	; 254
 afa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 afe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b02:	8e 7f       	andi	r24, 0xFE	; 254
 b04:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b08:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b0c:	80 61       	ori	r24, 0x10	; 16
 b0e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b12:	42 e3       	ldi	r20, 0x32	; 50
 b14:	60 e0       	ldi	r22, 0x00	; 0
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	68 de       	rcall	.-816    	; 0x7ea <Endpoint_ConfigureEndpoint_Prv>
 b1a:	72 d1       	rcall	.+740    	; 0xe00 <USB_Event_Stub>
 b1c:	ff 91       	pop	r31
 b1e:	ef 91       	pop	r30
 b20:	bf 91       	pop	r27
 b22:	af 91       	pop	r26
 b24:	9f 91       	pop	r25
 b26:	8f 91       	pop	r24
 b28:	7f 91       	pop	r23
 b2a:	6f 91       	pop	r22
 b2c:	5f 91       	pop	r21
 b2e:	4f 91       	pop	r20
 b30:	3f 91       	pop	r19
 b32:	2f 91       	pop	r18
 b34:	0f 90       	pop	r0
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	0f 90       	pop	r0
 b3a:	1f 90       	pop	r1
 b3c:	18 95       	reti

00000b3e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	aa 97       	sbiw	r28, 0x2a	; 42
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	f8 94       	cli
 b4e:	de bf       	out	0x3e, r29	; 62
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	cd bf       	out	0x3d, r28	; 61
 b54:	e1 e2       	ldi	r30, 0x21	; 33
 b56:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b58:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b5c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b5e:	21 e0       	ldi	r18, 0x01	; 1
 b60:	e9 32       	cpi	r30, 0x29	; 41
 b62:	f2 07       	cpc	r31, r18
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 b64:	c9 f7       	brne	.-14     	; 0xb58 <USB_Device_ProcessControlRequest+0x1a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b66:	56 dc       	rcall	.-1876   	; 0x414 <EVENT_USB_Device_ControlRequest>
 b68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 b6c:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b6e:	30 c1       	rjmp	.+608    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 b70:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 b74:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <USB_ControlRequest+0x1>
 b78:	95 30       	cpi	r25, 0x05	; 5
 b7a:	09 f4       	brne	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0x40>
 b7c:	83 c0       	rjmp	.+262    	; 0xc84 <USB_Device_ProcessControlRequest+0x146>
 b7e:	30 f4       	brcc	.+12     	; 0xb8c <USB_Device_ProcessControlRequest+0x4e>
 b80:	91 30       	cpi	r25, 0x01	; 1
 b82:	a9 f1       	breq	.+106    	; 0xbee <USB_Device_ProcessControlRequest+0xb0>
 b84:	68 f0       	brcs	.+26     	; 0xba0 <USB_Device_ProcessControlRequest+0x62>
 b86:	93 30       	cpi	r25, 0x03	; 3
 b88:	91 f1       	breq	.+100    	; 0xbee <USB_Device_ProcessControlRequest+0xb0>
 b8a:	22 c1       	rjmp	.+580    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 b8c:	98 30       	cpi	r25, 0x08	; 8
 b8e:	09 f4       	brne	.+2      	; 0xb92 <USB_Device_ProcessControlRequest+0x54>
 b90:	ef c0       	rjmp	.+478    	; 0xd70 <USB_Device_ProcessControlRequest+0x232>
 b92:	99 30       	cpi	r25, 0x09	; 9
 b94:	09 f4       	brne	.+2      	; 0xb98 <USB_Device_ProcessControlRequest+0x5a>
 b96:	fb c0       	rjmp	.+502    	; 0xd8e <USB_Device_ProcessControlRequest+0x250>
 b98:	96 30       	cpi	r25, 0x06	; 6
 b9a:	09 f0       	breq	.+2      	; 0xb9e <USB_Device_ProcessControlRequest+0x60>
 b9c:	19 c1       	rjmp	.+562    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b9e:	94 c0       	rjmp	.+296    	; 0xcc8 <USB_Device_ProcessControlRequest+0x18a>
 ba0:	80 38       	cpi	r24, 0x80	; 128
 ba2:	21 f0       	breq	.+8      	; 0xbac <USB_Device_ProcessControlRequest+0x6e>
 ba4:	82 38       	cpi	r24, 0x82	; 130
 ba6:	09 f0       	breq	.+2      	; 0xbaa <USB_Device_ProcessControlRequest+0x6c>
 ba8:	13 c1       	rjmp	.+550    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 baa:	08 c0       	rjmp	.+16     	; 0xbbc <USB_Device_ProcessControlRequest+0x7e>
 bac:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 bb0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_Device_RemoteWakeupEnabled>
 bb4:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 bb6:	89 f0       	breq	.+34     	; 0xbda <USB_Device_ProcessControlRequest+0x9c>
 bb8:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bba:	0f c0       	rjmp	.+30     	; 0xbda <USB_Device_ProcessControlRequest+0x9c>
 bbc:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 bc0:	8f 70       	andi	r24, 0x0F	; 15
 bc2:	87 30       	cpi	r24, 0x07	; 7
 bc4:	08 f0       	brcs	.+2      	; 0xbc8 <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bc6:	04 c1       	rjmp	.+520    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 bc8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 bcc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 bd0:	85 fb       	bst	r24, 5
 bd2:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bd4:	80 f9       	bld	r24, 0
 bd6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bda:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bde:	97 7f       	andi	r25, 0xF7	; 247
 be0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 be4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 be8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bec:	cc c0       	rjmp	.+408    	; 0xd86 <USB_Device_ProcessControlRequest+0x248>
 bee:	28 2f       	mov	r18, r24
 bf0:	2d 7f       	andi	r18, 0xFD	; 253
 bf2:	09 f0       	breq	.+2      	; 0xbf6 <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 bf4:	ed c0       	rjmp	.+474    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 bf6:	88 23       	and	r24, r24
 bf8:	19 f0       	breq	.+6      	; 0xc00 <USB_Device_ProcessControlRequest+0xc2>
 bfa:	82 30       	cpi	r24, 0x02	; 2
 bfc:	61 f0       	breq	.+24     	; 0xc16 <USB_Device_ProcessControlRequest+0xd8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 bfe:	e8 c0       	rjmp	.+464    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 c00:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 c04:	81 30       	cpi	r24, 0x01	; 1
 c06:	09 f0       	breq	.+2      	; 0xc0a <USB_Device_ProcessControlRequest+0xcc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c08:	e3 c0       	rjmp	.+454    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 c0a:	93 30       	cpi	r25, 0x03	; 3
 c0c:	09 f0       	breq	.+2      	; 0xc10 <USB_Device_ProcessControlRequest+0xd2>
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <USB_Device_RemoteWakeupEnabled>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c14:	2e c0       	rjmp	.+92     	; 0xc72 <USB_Device_ProcessControlRequest+0x134>
 c16:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 c1a:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c1c:	2a c0       	rjmp	.+84     	; 0xc72 <USB_Device_ProcessControlRequest+0x134>
 c1e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 c22:	8f 70       	andi	r24, 0x0F	; 15
 c24:	2f ef       	ldi	r18, 0xFF	; 255
 c26:	28 0f       	add	r18, r24
 c28:	26 30       	cpi	r18, 0x06	; 6
 c2a:	08 f0       	brcs	.+2      	; 0xc2e <USB_Device_ProcessControlRequest+0xf0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c2c:	d1 c0       	rjmp	.+418    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 c2e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c32:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c36:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c38:	1c c0       	rjmp	.+56     	; 0xc72 <USB_Device_ProcessControlRequest+0x134>
 c3a:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c3c:	21 f4       	brne	.+8      	; 0xc46 <USB_Device_ProcessControlRequest+0x108>
 c3e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c42:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c44:	14 c0       	rjmp	.+40     	; 0xc6e <USB_Device_ProcessControlRequest+0x130>
 c46:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c4a:	90 61       	ori	r25, 0x10	; 16
 c4c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 c50:	21 e0       	ldi	r18, 0x01	; 1
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	a9 01       	movw	r20, r18
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <USB_Device_ProcessControlRequest+0x11e>
 c58:	44 0f       	add	r20, r20
 c5a:	55 1f       	adc	r21, r21
 c5c:	8a 95       	dec	r24
 c5e:	e2 f7       	brpl	.-8      	; 0xc58 <USB_Device_ProcessControlRequest+0x11a>
 c60:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 c64:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c68:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c6c:	88 60       	ori	r24, 0x08	; 8
 c6e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c72:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c7a:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c80:	e9 dd       	rcall	.-1070   	; 0x854 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c82:	a6 c0       	rjmp	.+332    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 c84:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 c86:	a4 c0       	rjmp	.+328    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 c88:	10 91 23 01 	lds	r17, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c8c:	1f 77       	andi	r17, 0x7F	; 127
 c8e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c92:	80 78       	andi	r24, 0x80	; 128
 c94:	81 2b       	or	r24, r17
 c96:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c9e:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ca0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ca4:	d7 dd       	rcall	.-1106   	; 0x854 <Endpoint_ClearStatusStage>
 ca6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 caa:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 cac:	fc cf       	rjmp	.-8      	; 0xca6 <USB_Device_ProcessControlRequest+0x168>
 cae:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 cb2:	80 68       	ori	r24, 0x80	; 128
 cb4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 cb8:	11 11       	cpse	r17, r1
 cba:	02 c0       	rjmp	.+4      	; 0xcc0 <USB_Device_ProcessControlRequest+0x182>
 cbc:	82 e0       	ldi	r24, 0x02	; 2
 cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <USB_Device_ProcessControlRequest+0x184>
 cc0:	83 e0       	ldi	r24, 0x03	; 3
 cc2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cc6:	84 c0       	rjmp	.+264    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 cc8:	80 58       	subi	r24, 0x80	; 128
 cca:	82 30       	cpi	r24, 0x02	; 2
 ccc:	08 f0       	brcs	.+2      	; 0xcd0 <USB_Device_ProcessControlRequest+0x192>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 cce:	80 c0       	rjmp	.+256    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 cd0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 cd4:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <USB_ControlRequest+0x3>
 cd8:	8c 3d       	cpi	r24, 0xDC	; 220
 cda:	53 e0       	ldi	r21, 0x03	; 3
 cdc:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 cde:	71 f5       	brne	.+92     	; 0xd3c <USB_Device_ProcessControlRequest+0x1fe>
 ce0:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 ce2:	8a 83       	std	Y+2, r24	; 0x02
 ce4:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ce6:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 ce8:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 cea:	f8 94       	cli
 cec:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cee:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 cf0:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 cf2:	3e e0       	ldi	r19, 0x0E	; 14
 cf4:	51 e2       	ldi	r21, 0x21	; 33
 cf6:	e3 2f       	mov	r30, r19
 cf8:	f0 e0       	ldi	r31, 0x00	; 0
 cfa:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
 cfe:	e4 91       	lpm	r30, Z
 d00:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <USB_Device_ProcessControlRequest+0x1cc>
 d04:	e2 95       	swap	r30
						SigReadAddress++;
 d06:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
 d08:	3f 5f       	subi	r19, 0xFF	; 255
 d0a:	ef 70       	andi	r30, 0x0F	; 15
 d0c:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	ea 30       	cpi	r30, 0x0A	; 10
 d12:	10 f0       	brcs	.+4      	; 0xd18 <USB_Device_ProcessControlRequest+0x1da>
 d14:	c7 96       	adiw	r24, 0x37	; 55
 d16:	01 c0       	rjmp	.+2      	; 0xd1a <USB_Device_ProcessControlRequest+0x1dc>
 d18:	c0 96       	adiw	r24, 0x30	; 48
 d1a:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d1c:	9d 93       	st	X+, r25
 d1e:	2f 5f       	subi	r18, 0xFF	; 255
 d20:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 d22:	49 f7       	brne	.-46     	; 0xcf6 <USB_Device_ProcessControlRequest+0x1b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d24:	4f bf       	out	0x3f, r20	; 63
 d26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d2a:	87 7f       	andi	r24, 0xF7	; 247
 d2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d30:	6a e2       	ldi	r22, 0x2A	; 42
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	ce 01       	movw	r24, r28
 d36:	01 96       	adiw	r24, 0x01	; 1
 d38:	95 dc       	rcall	.-1750   	; 0x664 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d3a:	14 c0       	rjmp	.+40     	; 0xd64 <USB_Device_ProcessControlRequest+0x226>
 d3c:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <USB_ControlRequest+0x4>
 d40:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <USB_ControlRequest+0x5>
 d44:	ae 01       	movw	r20, r28
 d46:	4f 5f       	subi	r20, 0xFF	; 255
 d48:	5f 4f       	sbci	r21, 0xFF	; 255
 d4a:	67 da       	rcall	.-2866   	; 0x21a <CALLBACK_USB_GetDescriptor>
 d4c:	bc 01       	movw	r22, r24
 d4e:	89 2b       	or	r24, r25
 d50:	09 f4       	brne	.+2      	; 0xd54 <USB_Device_ProcessControlRequest+0x216>
 d52:	3e c0       	rjmp	.+124    	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 d54:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d58:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d5a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d5e:	89 81       	ldd	r24, Y+1	; 0x01
 d60:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d62:	e1 dc       	rcall	.-1598   	; 0x726 <Endpoint_Write_Control_PStream_LE>
 d64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d68:	8b 77       	andi	r24, 0x7B	; 123
 d6a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d6e:	30 c0       	rjmp	.+96     	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 d70:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d72:	71 f5       	brne	.+92     	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 d74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d78:	87 7f       	andi	r24, 0xF7	; 247
 d7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d7e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d82:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d8a:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d8c:	77 cf       	rjmp	.-274    	; 0xc7c <USB_Device_ProcessControlRequest+0x13e>
 d8e:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d90:	1f c0       	rjmp	.+62     	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 d92:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 d96:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <USB_ControlRequest+0x3>
 d9a:	99 27       	eor	r25, r25
 d9c:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d9e:	c4 f4       	brge	.+48     	; 0xdd0 <USB_Device_ProcessControlRequest+0x292>
 da0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 da4:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 da6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 daa:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
 dae:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
 db2:	50 dd       	rcall	.-1376   	; 0x854 <Endpoint_ClearStatusStage>
 db4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_Device_ConfigurationNumber>
 db8:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 dba:	06 c0       	rjmp	.+12     	; 0xdc8 <USB_Device_ProcessControlRequest+0x28a>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 dbc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 dc0:	87 fd       	sbrc	r24, 7
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <USB_Device_ProcessControlRequest+0x28a>
 dc4:	81 e0       	ldi	r24, 0x01	; 1
 dc6:	01 c0       	rjmp	.+2      	; 0xdca <USB_Device_ProcessControlRequest+0x28c>

	EVENT_USB_Device_ConfigurationChanged();
 dc8:	84 e0       	ldi	r24, 0x04	; 4
 dca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dce:	1a db       	rcall	.-2508   	; 0x404 <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 dd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dd4:	83 ff       	sbrs	r24, 3
 dd6:	0a c0       	rjmp	.+20     	; 0xdec <USB_Device_ProcessControlRequest+0x2ae>
 dd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ddc:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 dde:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 de2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 de6:	80 62       	ori	r24, 0x20	; 32
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 de8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 dec:	aa 96       	adiw	r28, 0x2a	; 42
 dee:	0f b6       	in	r0, 0x3f	; 63
 df0:	f8 94       	cli
 df2:	de bf       	out	0x3e, r29	; 62
 df4:	0f be       	out	0x3f, r0	; 63
 df6:	cd bf       	out	0x3d, r28	; 61
 df8:	df 91       	pop	r29
 dfa:	cf 91       	pop	r28
 dfc:	1f 91       	pop	r17
 dfe:	08 95       	ret

00000e00 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 e00:	08 95       	ret

00000e02 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e02:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 e04:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 e08:	88 23       	and	r24, r24
 e0a:	99 f0       	breq	.+38     	; 0xe32 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e0c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 e10:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 e12:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 e16:	89 2f       	mov	r24, r25
 e18:	81 70       	andi	r24, 0x01	; 1
 e1a:	90 fd       	sbrc	r25, 0
 e1c:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e1e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e20:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 e28:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e2a:	89 de       	rcall	.-750    	; 0xb3e <USB_Device_ProcessControlRequest>
 e2c:	cf 70       	andi	r28, 0x0F	; 15
 e2e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 e32:	cf 91       	pop	r28
 e34:	08 95       	ret

00000e36 <__udivmodsi4>:
 e36:	a1 e2       	ldi	r26, 0x21	; 33
 e38:	1a 2e       	mov	r1, r26
 e3a:	aa 1b       	sub	r26, r26
 e3c:	bb 1b       	sub	r27, r27
 e3e:	fd 01       	movw	r30, r26
 e40:	0d c0       	rjmp	.+26     	; 0xe5c <__udivmodsi4_ep>

00000e42 <__udivmodsi4_loop>:
 e42:	aa 1f       	adc	r26, r26
 e44:	bb 1f       	adc	r27, r27
 e46:	ee 1f       	adc	r30, r30
 e48:	ff 1f       	adc	r31, r31
 e4a:	a2 17       	cp	r26, r18
 e4c:	b3 07       	cpc	r27, r19
 e4e:	e4 07       	cpc	r30, r20
 e50:	f5 07       	cpc	r31, r21
 e52:	20 f0       	brcs	.+8      	; 0xe5c <__udivmodsi4_ep>
 e54:	a2 1b       	sub	r26, r18
 e56:	b3 0b       	sbc	r27, r19
 e58:	e4 0b       	sbc	r30, r20
 e5a:	f5 0b       	sbc	r31, r21

00000e5c <__udivmodsi4_ep>:
 e5c:	66 1f       	adc	r22, r22
 e5e:	77 1f       	adc	r23, r23
 e60:	88 1f       	adc	r24, r24
 e62:	99 1f       	adc	r25, r25
 e64:	1a 94       	dec	r1
 e66:	69 f7       	brne	.-38     	; 0xe42 <__udivmodsi4_loop>
 e68:	60 95       	com	r22
 e6a:	70 95       	com	r23
 e6c:	80 95       	com	r24
 e6e:	90 95       	com	r25
 e70:	9b 01       	movw	r18, r22
 e72:	ac 01       	movw	r20, r24
 e74:	bd 01       	movw	r22, r26
 e76:	cf 01       	movw	r24, r30
 e78:	08 95       	ret

00000e7a <_exit>:
 e7a:	f8 94       	cli

00000e7c <__stop_program>:
 e7c:	ff cf       	rjmp	.-2      	; 0xe7c <__stop_program>
